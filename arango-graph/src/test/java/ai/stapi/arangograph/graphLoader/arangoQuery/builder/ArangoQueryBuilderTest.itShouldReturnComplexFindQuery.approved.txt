{
  "queryString" : "LET mainSubQuery = (

    FOR nodeElement IN @@collection
    FILTER (
        nodeElement.attributes.@filterAttributeNamePlaceholder_0[0].values[*].value
    ) LIKE @filterAttributeValuePlaceholder_0
    SORT nodeElement.attributes.@sortAttributeNamePlaceholder_0[0].values[0].value ASC
    LIMIT @offset,
    @limit
    LET subQuery_0 = (

        FOR nodeElement_0,
        edgeElement_0 IN INBOUND nodeElement @@collection_0
        FILTER (
            nodeElement_0.attributes.@filterAttributeNamePlaceholder_0__0[0].values[*].value
        ) == @filterAttributeValuePlaceholder_0__0
        LET subQuery_0_0 = (
            PARSE_IDENTIFIER (
                nodeElement_0._id
            ).collection == @joinedNodeCollection_0__0 ? (

                RETURN {
                    data: {

                    },
                    graphResponse: {
                        edges: [],
                        nodes: PUSH (
                            [],
                            nodeElement_0
                        )
                    }
                }
            ) : (

                RETURN {
                    graphResponse: {
                        nodes: [ {
                            [\"_id\"]: nodeElement_0._id,
                            [\"_key\"]: nodeElement_0._key,
                            [\"_metaData\"]: nodeElement_0._metaData,
                            [\"_rev\"]: nodeElement_0._rev,
                            [\"attributes\"]: {

                            }
                        } ],
                        edges: []
                    },
                    data: {

                    }
                }
            )
        )
        LET mappedEdgeObject0 = (
            {

            }
        )
        RETURN {
            [\"data\"]: {

            },
            [\"graphResponse\"]: {
                [\"edges\"]: PUSH (
                    subQuery_0_0[*].graphResponse.edges[**],
                    {
                        [\"_from\"]: edgeElement_0._from,
                        [\"_id\"]: edgeElement_0._id,
                        [\"_key\"]: edgeElement_0._key,
                        [\"_metaData\"]: edgeElement_0._metaData,
                        [\"_rev\"]: edgeElement_0._rev,
                        [\"_to\"]: edgeElement_0._to,
                        [\"attributes\"]: {

                        }
                    }
                ),
                [\"nodes\"]: subQuery_0_0[*].graphResponse.nodes[**]
            }
        }
    )
    LET subQuery_1 = (

        FOR nodeElement_1,
        edgeElement_1 IN OUTBOUND nodeElement @@collection_1
        LET subQuery_1_0 = (
            PARSE_IDENTIFIER (
                nodeElement_1._id
            ).collection == @joinedNodeCollection_0__1 ? (

                LET subQuery_graphTraverOption_1_0 = (

                    FOR nodeElement_1_0,
                    edgeElement_1_0 IN OUTBOUND nodeElement_1 @@collection_1_0
                    FILTER (
                        nodeElement_1_0.attributes.@filterAttributeNamePlaceholder_0__1_0[0].values[*].value
                    ) LIKE @filterAttributeValuePlaceholder_0__1_0
                    FILTER (
                        edgeElement_1_0.attributes.@filterAttributeNamePlaceholder_0__1_0[0].values[*].value
                    ) LIKE @filterAttributeValuePlaceholder_0__1_0
                    LET subQuery_1_0_0 = (
                        PARSE_IDENTIFIER (
                            nodeElement_1_0._id
                        ).collection == @joinedNodeCollection_0__1_0 ? (

                            RETURN {
                                data: {

                                },
                                graphResponse: {
                                    edges: [],
                                    nodes: PUSH (
                                        [],
                                        {
                                            [\"_id\"]: nodeElement_1_0._id,
                                            [\"_key\"]: nodeElement_1_0._key,
                                            [\"_metaData\"]: nodeElement_1_0._metaData,
                                            [\"_rev\"]: nodeElement_1_0._rev,
                                            [\"attributes\"]: KEEP (
                                                nodeElement_1_0.attributes,
                                                @keptAttributeName_0__1_0
                                            )
                                        }
                                    )
                                }
                            }
                        ) : (

                            RETURN {
                                graphResponse: {
                                    nodes: [ {
                                        [\"_id\"]: nodeElement_1_0._id,
                                        [\"_key\"]: nodeElement_1_0._key,
                                        [\"_metaData\"]: nodeElement_1_0._metaData,
                                        [\"_rev\"]: nodeElement_1_0._rev,
                                        [\"attributes\"]: {

                                        }
                                    } ],
                                    edges: []
                                },
                                data: {

                                }
                            }
                        )
                    )
                    LET mappedEdgeObject1_0 = (
                        {

                        }
                    )
                    RETURN {
                        [\"data\"]: {

                        },
                        [\"graphResponse\"]: {
                            [\"edges\"]: PUSH (
                                subQuery_1_0_0[*].graphResponse.edges[**],
                                {
                                    [\"_from\"]: edgeElement_1_0._from,
                                    [\"_id\"]: edgeElement_1_0._id,
                                    [\"_key\"]: edgeElement_1_0._key,
                                    [\"_metaData\"]: edgeElement_1_0._metaData,
                                    [\"_rev\"]: edgeElement_1_0._rev,
                                    [\"_to\"]: edgeElement_1_0._to,
                                    [\"attributes\"]: KEEP (
                                        edgeElement_1_0.attributes,
                                        @keptAttributeName_0__1_0
                                    )
                                }
                            ),
                            [\"nodes\"]: subQuery_1_0_0[*].graphResponse.nodes[**]
                        }
                    }
                )
                RETURN {
                    data: {

                    },
                    graphResponse: {
                        edges: subQuery_graphTraverOption_1_0[*].graphResponse.edges[**],
                        nodes: PUSH (
                            subQuery_graphTraverOption_1_0[*].graphResponse.nodes[**],
                            {
                                [\"_id\"]: nodeElement_1._id,
                                [\"_key\"]: nodeElement_1._key,
                                [\"_metaData\"]: nodeElement_1._metaData,
                                [\"_rev\"]: nodeElement_1._rev,
                                [\"attributes\"]: {

                                }
                            }
                        )
                    }
                }
            ) : (

                RETURN {
                    graphResponse: {
                        nodes: [ {
                            [\"_id\"]: nodeElement_1._id,
                            [\"_key\"]: nodeElement_1._key,
                            [\"_metaData\"]: nodeElement_1._metaData,
                            [\"_rev\"]: nodeElement_1._rev,
                            [\"attributes\"]: {

                            }
                        } ],
                        edges: []
                    },
                    data: {

                    }
                }
            )
        )
        LET mappedEdgeObject1 = (
            {

            }
        )
        RETURN {
            [\"data\"]: {

            },
            [\"graphResponse\"]: {
                [\"edges\"]: PUSH (
                    subQuery_1_0[*].graphResponse.edges[**],
                    {
                        [\"_from\"]: edgeElement_1._from,
                        [\"_id\"]: edgeElement_1._id,
                        [\"_key\"]: edgeElement_1._key,
                        [\"_metaData\"]: edgeElement_1._metaData,
                        [\"_rev\"]: edgeElement_1._rev,
                        [\"_to\"]: edgeElement_1._to,
                        [\"attributes\"]: {

                        }
                    }
                ),
                [\"nodes\"]: subQuery_1_0[*].graphResponse.nodes[**]
            }
        }
    )
    LET subQuery_2 = (

        FOR nodeElement_2,
        edgeElement_2 IN OUTBOUND nodeElement @@collection_2
        LET subQuery_2_0 = (
            (

                RETURN {
                    graphResponse: {
                        nodes: [ {
                            [\"_id\"]: nodeElement_2._id,
                            [\"_key\"]: nodeElement_2._key,
                            [\"_metaData\"]: nodeElement_2._metaData,
                            [\"_rev\"]: nodeElement_2._rev,
                            [\"attributes\"]: {

                            }
                        } ],
                        edges: []
                    },
                    data: {

                    }
                }
            )
        )
        LET mappedEdgeObject2 = (
            {

            }
        )
        RETURN {
            [\"data\"]: {

            },
            [\"graphResponse\"]: {
                [\"edges\"]: PUSH (
                    subQuery_2_0[*].graphResponse.edges[**],
                    {
                        [\"_from\"]: edgeElement_2._from,
                        [\"_id\"]: edgeElement_2._id,
                        [\"_key\"]: edgeElement_2._key,
                        [\"_metaData\"]: edgeElement_2._metaData,
                        [\"_rev\"]: edgeElement_2._rev,
                        [\"_to\"]: edgeElement_2._to,
                        [\"attributes\"]: {

                        }
                    }
                ),
                [\"nodes\"]: subQuery_2_0[*].graphResponse.nodes[**]
            }
        }
    )
    RETURN {
        [\"data\"]: {

        },
        [\"graphResponse\"]: {
            [\"edges\"]: UNION (
                subQuery_0[*].graphResponse.edges[**],
                subQuery_1[*].graphResponse.edges[**],
                subQuery_2[*].graphResponse.edges[**]
            ),
            [\"mainGraphElement\"]: {
                [\"_id\"]: nodeElement._id,
                [\"_key\"]: nodeElement._key,
                [\"_metaData\"]: nodeElement._metaData,
                [\"_rev\"]: nodeElement._rev,
                [\"attributes\"]: KEEP (
                    nodeElement.attributes,
                    @keptAttributeName_0,
                    @keptAttributeName_1,
                    @keptAttributeName_2
                )
            },
            [\"nodes\"]: UNION (
                subQuery_0[*].graphResponse.nodes[**],
                subQuery_1[*].graphResponse.nodes[**],
                subQuery_2[*].graphResponse.nodes[**]
            )
        }
    }
)
RETURN {
    [\"data\"]: [ ],
    [\"graphResponse\"]: {
        [\"edges\"]: mainSubQuery[*].graphResponse.edges[**],
        [\"mainGraphElements\"]: mainSubQuery[*].graphResponse.mainGraphElement,
        [\"nodes\"]: mainSubQuery[*].graphResponse.nodes[**]
    }
}
",
  "bindParameters" : {
    "@collection" : "example_start_node_type",
    "@collection_0" : "example_edge_type_1",
    "@collection_1" : "example_edge_type_2",
    "@collection_1_0" : "example_edge_type_2_2",
    "@collection_2" : "example_edge_type_3",
    "filterAttributeNamePlaceholder_0" : "some_attribute",
    "filterAttributeNamePlaceholder_0__0" : "some_node_from_attribute",
    "filterAttributeNamePlaceholder_0__1_0" : "some_node_deeper_attribute",
    "filterAttributeValuePlaceholder_0" : "%some_value%",
    "filterAttributeValuePlaceholder_0__0" : "someValue",
    "filterAttributeValuePlaceholder_0__1_0" : "%someValue%",
    "joinedNodeCollection_0__0" : "example_node_from_1",
    "joinedNodeCollection_0__1" : "example_node_to_2",
    "joinedNodeCollection_0__1_0" : "example_deeper_node",
    "keptAttributeName_0" : "some_attribute",
    "keptAttributeName_0__1_0" : "some_node_deeper_attribute",
    "keptAttributeName_1" : "isExample",
    "keptAttributeName_2" : "quantity",
    "limit" : 100,
    "offset" : 5,
    "sortAttributeNamePlaceholder_0" : "some_attribute"
  }
}